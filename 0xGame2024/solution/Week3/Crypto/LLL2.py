from Crypto.Util.number import getPrime, inverse
from secret import seed, flag
from hashlib import md5


def MD5(m):
    return md5(str(m).encode()).hexdigest()


assert flag == "0xGame{" + MD5(seed) + "}"
assert seed.bit_length() == 510


class LuanGao:
    def __init__(self, bits: int, seed: int):
        self.bits = bits  # 512
        self.m = getPrime(self.bits)  # 512
        self.a = getPrime(self.bits // 2)  # 256
        self.cur = (self.a * seed) % self.m

    def extract(self):
        ret = self.cur
        self.cur = (self.a * self.cur) % self.m
        self.cur += getPrime(self.bits // 4)
        return ret


C = LuanGao(512, seed)
Cs = [C.extract() for _ in range(5)]

print(f"Cs = {Cs}")
print(f"C.m = {C.m}")

"""
Cs = [
    11804527453299586684489593808016317337345238230165321056832279785591503368758306671170625597063579251464905729051049524014502008954170088604924368057540940, 
    4930922884306486570759661288602557428608315558804950537470100263019228888817481617065454705843164809506859574053884206133344549895853064735361336486560981, 
    5380263856446165449531647111260010594620416730932539097782399557603420658350407080366132490174060420530708293564252852668431923560882648691392446521188465,
    10746696290782998433216934286282230556131938525513632178308443345441147075710552571129957873399395862207656161609046567289600084193860244770966610161184627, 
    2195032957511830992558961021566904850278796737316238566513837995297394215638259916944087623923636789312134734949452839561765171446217520081402769962517110
]
C.m = 12813864523019740432913161815051292412705285817864701047922722497269479288096574264414061282833203433542813637861620032851255308640850882149603687035724753
"""
